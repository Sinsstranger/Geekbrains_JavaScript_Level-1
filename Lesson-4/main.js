'use strict';
/**
 * 1. Написать функцию, преобразующую число в объект. Передавая на вход число от 0 до 999, мы должны получить на выходе объект, в котором в соответствующих свойствах описаны единицы, десятки и сотни. Например, для числа 245 мы должны получить следующий объект: {‘единицы’: 5, ‘десятки’: 4, ‘сотни’: 2}. Если число превышает 999, необходимо выдать соответствующее сообщение с помощью console.log и вернуть пустой объект.
 * @param num
 * @returns {{}}
 */
const numPlacer = (num) => {
	let result = {};
	switch (num.toString().length) {
		case 1:
			Object.assign(result, {ones: num.toString()[0]});
			break;
		case 2:
			Object.assign(result, {ones: num.toString()[1], dozens: num.toString()[0]});
			break;
		case 3:
			Object.assign(result, {ones: num.toString()[2], dozens: num.toString()[1], hundreds: num.toString()[0]});
			break;
		default:
			console.log(`Разрядность числа более 3`);
	}
	return result;
}
console.log(numPlacer(245));
/**
 * 2. Продолжить работу с интернет-магазином:
 *		В прошлом домашнем задании вы реализовали корзину на базе массивов. Какими объектами можно заменить их элементы?
 *			Реализуйте такие объекты.
 *			Перенести функционал подсчета корзины на объектно-ориентированную базу.
 *		Решено в уроке 3
 */
/**
 * 3. * Подумать над глобальными сущностями. К примеру, сущность «Продукт» в интернет-магазине актуальна не только для корзины, но и для каталога. Стремиться нужно к тому, чтобы объект «Продукт» имел единую структуру для различных модулей сайта, но в разных местах давал возможность вызывать разные методы.
 * 	###########Кроме наследования в голову ничего не идет###########
 */